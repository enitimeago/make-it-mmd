# MIT License
#
# Copyright (c) 2024 enitimeago
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

blendshape_viewer_license = """// Blendshape Viewer
//
// MIT License
//
// Copyright (c) 2023 Ha√Ø~ (@vr_hai github.com/hai-vr)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
"""

path_re = re2.compile(r"^(.+)\/([^\/]+)$")

def get_filename(file):
    matcher = path_re.matcher(file)
    if not matcher.matches():
        return False
    return matcher.group(2)

# Symlink transformation.
# Ideally workflows only touch third_party, but it's a pain to make symlinks on Windows.
def _create_symlinks_impl(ctx):
    for file in ctx.params["targets"]:
        ctx.create_symlink(
            ctx.new_path(ctx.params["dest"]).resolve(get_filename(file)),
            ctx.new_path(file),
        )

def create_symlinks(dest, targets):
    return core.dynamic_transform(
        impl = _create_symlinks_impl,
        params = {"dest": dest, "targets": targets},
    )

vendor_path_editor = "Packages/enitimeago.non-destructive-mmd/Editor/vendor"

blendshape_viewer_window_base_file = "third_party/blendshape-viewer/Packages/dev.hai-vr.blendshape-viewer/Scripts/Editor/BlendshapeViewerEditorWindowBase.cs"
blendshape_viewer_files = [
    "third_party/blendshape-viewer/Packages/dev.hai-vr.blendshape-viewer/Scripts/Editor/BlendshapeViewerDiffCompute.cs",
    "third_party/blendshape-viewer/Packages/dev.hai-vr.blendshape-viewer/Scripts/Editor/BlendshapeViewerGenerator.cs",
    "third_party/blendshape-viewer/Packages/dev.hai-vr.blendshape-viewer/Scripts/Editor/DiffCompute.compute",
    "third_party/blendshape-viewer/Packages/dev.hai-vr.blendshape-viewer/Shaders/HaiBlendshapeViewer.shader",
    "third_party/blendshape-viewer/Packages/dev.hai-vr.blendshape-viewer/Shaders/HaiBlendshapeViewerRectOnly.shader",
    blendshape_viewer_window_base_file,
]

core.workflow(
    name = "blendshape-viewer",
    origin = git.origin(
        url = "https://github.com/hai-vr/blendshape-viewer-vcc.git",
        ref = "main",
    ),
    destination = git.github_pr_destination(
        url = "https://github.com/enitimeago/make-it-mmd.git",
        destination_ref = "main",
        title = "Update Blendshape Viewer",
        update_description = True,
        pr_branch = "update-blendshape-viewer",
    ),
    destination_files = glob(["third_party/blendshape-viewer/**"] +
                             ["{}/{}".format(vendor_path_editor, get_filename(file)) for file in blendshape_viewer_files]),
    authoring = authoring.pass_thru("github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"),
    transformations = [
        # Prepend license header to all source files.
        # Need to handle UTF-8 BOM otherwise it incorrectly gets put after the header.
        # Seems like it can't be matched directly via regex so use a workaround.
        core.replace(
            before = "${utf8_bom}${first_character}",
            after = "${utf8_bom}" + blendshape_viewer_license + "${first_character}",
            regex_groups = {
                "utf8_bom": r"^.*?",
                "first_character": r"[a-zA-Z/#]",
            },
            paths = glob(["**/*.compute", "**/*.cs", "**/*.shader"]),
            first_only = True,
            multiline = True,
        ),
        # Change classes to internal.
        core.replace(
            before = "public class",
            after = "internal class",
            paths = glob(["**/*.cs"]),
        ),
        # Rename namespace to avoid collision with upstream.
        core.replace(
            before = "Hai.BlendshapeViewer",
            after = "enitimeago.NonDestructiveMMD.vendor.BlendshapeViewer",
            paths = glob(["**/*.cs"]),
        ),
        # Rename shaders to avoid collision with upstream.
        core.replace(
            before = "\"Hai/BlendshapeViewer",
            after = "\"enitimeago/MakeItMMD_Hai_BlendshapeViewer",
            paths = glob(["**/*.cs", "**/*.shader"]),
        ),
        # Update expected path of DiffCompute.compute.
        core.replace(
            before = "Assets/Hai/BlendshapeViewer/Scripts/Editor/DiffCompute.compute",
            after = vendor_path_editor + "/DiffCompute.compute",
        ),
        # Move to third_party location.
        core.move("", "third_party/blendshape-viewer"),
        # Make EditorWindow accessible as a base.
        core.copy("third_party/blendshape-viewer/Packages/dev.hai-vr.blendshape-viewer/Scripts/Editor/BlendshapeViewerEditorWindow.cs", blendshape_viewer_window_base_file),
        core.replace(
            before = "internal class",
            after = "internal abstract class",
            paths = glob([blendshape_viewer_window_base_file]),
        ),
        core.replace(
            before = "BlendshapeViewerEditorWindow",
            after = "BlendshapeViewerEditorWindowBase",
            paths = glob([blendshape_viewer_window_base_file]),
        ),
        core.replace(
            before = "private ",
            after = "protected ",
            paths = glob([blendshape_viewer_window_base_file]),
        ),
        core.replace(
            before = "${menuitem_method}",
            after = "",
            paths = glob([blendshape_viewer_window_base_file]),
            regex_groups = {
                # Remove methods annotated with [MenuItem]. Based on https://stackoverflow.com/a/31069671
                "menuitem_method": r"\[MenuItem.*?\]([^{]*)((?:\{[^}]*\}|//.*\r?\n|\"[^\"]*\"|[\S\s])*?\{(?:\{[^}]*\}|//.*\r?\n|\"[^\"]*\"|[\S\s])*?)\}",
            },
            multiline = True,
        ),
        # Create symlinks.
        create_symlinks(
            dest = vendor_path_editor,
            targets = blendshape_viewer_files,
        ),
    ],
)
